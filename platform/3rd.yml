AWSTemplateFormatVersion: '2010-09-09'

Resources:
  # Create a role for the Lambda function
  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: my-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt Queue.Arn
  #Create a cloudtrail role
  CloudTrailRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudTrailPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:RunInstances
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudtrail:GetTrailEvents
                Resource: '*'
  #Create a cloudTrail event
  CloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: !Sub 'my-cloudtrail'
      S3BucketName: !Sub 'my-cloudtrail-bucket'
      EnableLogFileValidation: True
      IsLogging: True
      IncludeGlobalServiceEvents: True
      IsMultiRegionTrail: False
      CloudWatchLogsLogGroupArn: !GetAtt CloudWatchLogsLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt CloudTrailRole.Arn

  # Create a CloudWatch Logs log group
  CloudWatchLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 365
      
  # Create an SQS queue
  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: my-queue

  # Create a Lambda function
  Function:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: my-function
      Runtime: python3.8
      Handler: index.handler
      Code:
        ZipFile: !Sub |
          def lambda_handler(event, context):
          import boto3
          sqs = boto3.resources('sqs')
          queue = sqs.get_queue_by_name(QueueName='my-queue')
          response = queue.send_message(
              MessageBody="boto3",
              MessageAttributes={
                  'KeyPair': {
                      'Key1': 'Pair1',
                      'Key2': 'Pair2'
                  }
              }
          )

          return response.get('MessageId')
          return response.get('MD5OfMessageBody')


      Role: !GetAtt FunctionRole.Arn

  # Create an EventBridge rule
  Rule:
    Type: AWS::Events::Rule
    Properties:
      Name: my-rule
      Description: EventBridge rule to trigger a Lambda function when an EC2 instance is made
      EventBusName: default
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - "EC2 Instance Launch Successful"
      State: ENABLED
      Targets:
        - Arn: !GetAtt Function.Arn
          Id: my-function
  